{"version":3,"file":"static/webpack/static/development/pages/index.js.696e10971311bfc36ea6.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React  from 'react';\nimport { Button , Container} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { saveAs } from 'file-saver';\n\nvar FileSaver = require('file-saver');\n\nclass Index extends React.Component {\n  \n\n    constructor(props) {\n        super(props)\n        this.state =  {\n            time: 0,\n            start: 0,\n            isOn: false,\n            clicks:1,\n            currentTime:Date.now(),\n            laps:new Object()\n        }\n        this.state.lapTime= setInterval(() => this.setState({\n            currentTime: Date.now()\n          }), 1);\n        \n        console.log(new Date(this.state.currentTime))\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n        this.lapTimer = this.lapTimer.bind(this)\n        \n    }\n\n    startTimer() {\n        this.setState({\n            time: this.state.time,\n            start: Date.now() - this.state.time,\n            isOn: true,\n            clicks:1,\n            laptime:undefined\n        })\n        this.state.lapTime= setInterval(() => this.setState({\n          time: Date.now() - this.state.start,\n        }), 1);\n      }\n\n\n      stopTimer() {\n        this.setState({isOn: false,clicks:1, laps:new Object()})\n        clearInterval(this.state.lapTime)\n      }\n\n      resetTimer() {\n        this.setState({time: 0, laps:new Object()})\n      }\n\n      lapTimer() {\n        let laps = this.state.laps;\n        if(this.state.clicks<= 5) {\n            let d = new Date(this.state.time)\n            let time = d.getFullYear()+\"/\"+(d.getMonth()+1)+\"/\"+d.getDate() + \n                   \" \"+ d.getHours()+\":\"+d.getMinutes()+\":\"+\n                   d.getSeconds()+\" \"+d.getMilliseconds();\n           laps[this.state.clicks]=time;\n           this.setState({clicks: this.state.clicks+1 , laps:laps})\n        }\n      }\n\n      export() {\n          console.log(this.state.laps)\n        var blob = new Blob([this.state.laps.toString()], {type: \"text/plain;charset=utf-8\"});\n        navigator.msSaveBlob(blob, \"filename.csv\")\n      }\n\n      componentWillMount(){\n        \n      }\n\n      componentDidMount(){\n       \n     }\n\n    \n     \n\n    render() {\n        \n\n        let start = (this.state.time == 0) ?\n      <Button onClick={this.startTimer}>start</Button> :\n      null\n    let stop = (this.state.isOn) ?\n      <Button onClick={this.stopTimer}>stop</Button> :\n      null\n    let reset = (this.state.time != 0 && !this.state.isOn) ?\n      <Button onClick={this.resetTimer}>reset</Button> :\n      null\n    let resume = (this.state.time != 0 && !this.state.isOn) ?\n      <Button onClick={this.startTimer}>resume</Button> :\n      null\n\n      let d = new Date(this.state.currentTime)\n      let currentTime = d.getFullYear()+\"/\"+(d.getMonth()+1)+\"/\"+d.getDate() + \n             \" \"+ d.getHours()+\":\"+d.getMinutes()+\":\"+\n             d.getSeconds()+\" \"+d.getMilliseconds();\n\n        return (<React.Fragment>\n            <Container>\n                <br/>\n            <Button color=\"primary\"  >Timer Project</Button>\n            <h3>timer: {this.state.time}</h3>\n            <h3>Current Time : {currentTime}</h3>\n            &nbsp;&nbsp;&nbsp;{start}&nbsp;&nbsp;&nbsp;\n            {resume} &nbsp;&nbsp;&nbsp;\n            {stop} &nbsp;&nbsp;&nbsp;\n            {reset} &nbsp;&nbsp;&nbsp;\n            <Button color=\"primary\"  onClick={this.lapTimer} disabled={this.state.time==0 || this.state.clicks==6}>Lap</Button>\n            <Button color=\"primary\" onClick={this.export} disabled={this.state.clicks==1}>Export</Button>\n            &nbsp;&nbsp;&nbsp;{Object.keys(this.state.laps).map((item,i)=>(\n            <p key={item}>{item}: {this.state.laps[item ]}</p>)\n            )}\n            </Container>\n            \n        </React.Fragment>)\n    }\n}\n\n\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AADA;AAAA;AAGA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;;;AAIA;;;AAOA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;;;;AApHA;AACA;AAwHA;;;;A","sourceRoot":""}