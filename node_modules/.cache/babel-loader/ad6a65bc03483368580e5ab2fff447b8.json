{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/atharva/Documents/UPB/jobtest/pages/index.js\";\nimport React from 'react';\nimport Clock from 'react-live-clock';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this.state = {\n      time: 0,\n      isOn: false,\n      start: 0\n    };\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.stopTimer = _this.stopTimer.bind(_assertThisInitialized(_this));\n    _this.resetTimer = _this.resetTimer.bind(_assertThisInitialized(_this));\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Index, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      var _this2 = this;\n\n      this.setState({\n        isOn: true,\n        time: this.state.time,\n        start: _Date$now() - this.state.time\n      });\n      this.timer = setInterval(function () {\n        return _this2.setState({\n          time: _Date$now() - _this2.state.start\n        });\n      }, 1);\n    }\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      this.setState({\n        isOn: false\n      });\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"resetTimer\",\n    value: function resetTimer() {\n      this.setState({\n        time: 0,\n        isOn: false\n      });\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime() {\n      var currentdate = new Date();\n      var hours = currentdate.getUTCHours() + 2;\n\n      if (hours >= 24) {\n        hours -= 24;\n      }\n\n      if (hours < 0) {\n        hours += 12;\n      }\n\n      hours = hours + \"\";\n\n      if (hours.length == 1) {\n        hours = \"0\" + hours;\n      }\n\n      var minutes = currentdate.getUTCMinutes();\n      minutes = minutes + \"\";\n\n      if (minutes.length == 1) {\n        minutes = \"0\" + minutes;\n      }\n\n      var seconds = currentdate.getUTCSeconds(); //console.log(hours, minutes, seconds)\n\n      this.setState({\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      });\n    }\n  }, {\n    key: \"timerstart\",\n    value: function timerstart() {\n      this.setState(function (state, props) {\n        return {\n          timer: state.counter + 1\n        };\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setTime();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.setInterval(function () {\n        this.setTime();\n      }.bind(this), 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var start = this.state.time == 0 ? React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"start\") : null;\n      var stop = this.state.time == 0 || !this.state.isOn ? null : React.createElement(\"button\", {\n        onClick: this.stopTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"stop\");\n      var resume = this.state.time == 0 || this.state.isOn ? null : React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"resume\");\n      var reset = this.state.time == 0 || this.state.isOn ? null : React.createElement(\"button\", {\n        onClick: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"reset\");\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Clock, {\n        format: 'HH:mm:ss',\n        ticking: true,\n        timezone: 'US/Pacific',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Start\"), React.createElement(Button, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(Button, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Real - Time : \"), React.createElement(\"span\", {\n        style: {\n          \"textDecoration\": \"underline\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.hours, \":\", this.state.minutes, \":\", this.state.seconds)), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"timer: \", ms(this.state.time)), start, resume, stop, reset);\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/atharva/Documents/UPB/jobtest/pages/index.js"],"names":["React","Clock","Button","Index","props","state","time","isOn","start","startTimer","bind","stopTimer","resetTimer","setState","timer","setInterval","clearInterval","currentdate","Date","hours","getUTCHours","length","minutes","getUTCMinutes","seconds","getUTCSeconds","counter","setTime","window","stop","resume","reset","ms","Component"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport Clock from 'react-live-clock';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Index extends React.Component {\n    constructor(props) {\n        this.state = {\n            time: 0,\n            isOn: false,\n            start: 0\n          }\n          this.startTimer = this.startTimer.bind(this)\n          this.stopTimer = this.stopTimer.bind(this)\n          this.resetTimer = this.resetTimer.bind(this)\n    }\n\n    startTimer() {\n        this.setState({\n          isOn: true,\n          time: this.state.time,\n          start: Date.now() - this.state.time\n        })\n        this.timer = setInterval(() => this.setState({\n          time: Date.now() - this.state.start\n        }), 1);\n      }\n\n\n      stopTimer() {\n        this.setState({isOn: false})\n        clearInterval(this.timer)\n      }\n\n      resetTimer() {\n        this.setState({time: 0, isOn: false})\n      }\n\n\n    setTime(){\n  \n        let currentdate = new Date();\n        let hours = currentdate.getUTCHours()+2    \n      \n          \n          if( hours >= 24 ){ hours -= 24; }\n          if( hours < 0   ){ hours += 12; }\n    \n          hours = hours + \"\";\n          if( hours.length == 1 ){ hours = \"0\" + hours; }\n    \n          \n          let minutes = currentdate.getUTCMinutes();\n    \n          \n          minutes = minutes + \"\";\n          if( minutes.length == 1 ){ minutes = \"0\" + minutes; }\n    \n          let seconds = currentdate.getUTCSeconds();\n          //console.log(hours, minutes, seconds)\n          this.setState({\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n          });\n      }\n\n      timerstart() {\n        this.setState(\n            (state, props) => {\n              return { timer: state.counter + 1 };\n            });\n      }\n\n      componentWillMount(){\n        this.setTime();\n      }\n\n      componentDidMount(){\n        window.setInterval(function () {\n         this.setTime();\n       }.bind(this), 1000);\n     }\n\n     \n\n    render() {\n        let start = (this.state.time == 0) ?\n      <button onClick={this.startTimer}>start</button> :\n      null\n    let stop = (this.state.time == 0 || !this.state.isOn) ?\n      null :\n      <button onClick={this.stopTimer}>stop</button>\n    let resume = (this.state.time == 0 || this.state.isOn) ?\n      null :\n      <button onClick={this.startTimer}>resume</button>\n    let reset = (this.state.time == 0 || this.state.isOn) ?\n      null :\n      <button onClick={this.resetTimer}>reset</button>\n\n        return (<React.Fragment>\n            <Clock format={'HH:mm:ss'} ticking={true} timezone={'US/Pacific'} /><br/>\n            <Button color=\"primary\"  >Start</Button>\n            <Button color=\"danger\">Stop</Button>\n            <Button color=\"success\">Reset</Button>\n            \n            <div >\n                <label>Real - Time : </label>\n                <span style= {{\"textDecoration\":\"underline\"}} >{this.state.hours}:{this.state.minutes}:{this.state.seconds}</span>\n            </div>\n            \n\n            <h3>timer: {ms(this.state.time)}</h3>\n            {start}\n            {resume}\n            {stop}\n            {reset}\n        </React.Fragment>)\n    }\n}\n\n\n\nexport default Index"]},"metadata":{},"sourceType":"module"}