{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/atharva/Documents/UPB/jobtest/pages/index.js\";\nimport React from 'react';\nimport Clock from 'react-live-clock';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    //console.log(hours, minutes, seconds)\n    _this.setState({\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      time: 0,\n      isOn: false,\n      start: 0\n    });\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Index, [{\n    key: \"setTime\",\n    value: function setTime() {\n      var currentdate = new Date();\n      var hours = currentdate.getUTCHours() + 2;\n\n      if (hours >= 24) {\n        hours -= 24;\n      }\n\n      if (hours < 0) {\n        hours += 12;\n      }\n\n      hours = hours + \"\";\n\n      if (hours.length == 1) {\n        hours = \"0\" + hours;\n      }\n\n      var minutes = currentdate.getUTCMinutes();\n      minutes = minutes + \"\";\n\n      if (minutes.length == 1) {\n        minutes = \"0\" + minutes;\n      }\n\n      var seconds = currentdate.getUTCSeconds();\n    }\n  }, {\n    key: \"timerstart\",\n    value: function timerstart() {\n      this.setState(function (state, props) {\n        return {\n          timer: state.counter + 1\n        };\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setTime();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.setInterval(function () {\n        this.setTime();\n      }.bind(this), 1000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Clock, {\n        format: 'HH:mm:ss',\n        ticking: true,\n        timezone: 'US/Pacific',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Start\"), React.createElement(Button, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Stop\"), React.createElement(Button, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Real - Time : \"), React.createElement(\"span\", {\n        style: {\n          \"textDecoration\": \"underline\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.state.hours, \":\", this.state.minutes, \":\", this.state.seconds)));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/atharva/Documents/UPB/jobtest/pages/index.js"],"names":["React","Clock","Button","Index","props","setState","hours","minutes","seconds","time","isOn","start","currentdate","Date","getUTCHours","length","getUTCMinutes","getUTCSeconds","state","timer","counter","setTime","window","setInterval","bind","Component"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport Clock from 'react-live-clock';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass Index extends React.Component {\n    constructor(props) {\n          //console.log(hours, minutes, seconds)\n          this.setState({\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            time: 0,\n            isOn: false,\n            start: 0\n          });\n    }\n    setTime(){\n  \n        let currentdate = new Date();\n        let hours = currentdate.getUTCHours()+2    \n      \n          \n          if( hours >= 24 ){ hours -= 24; }\n          if( hours < 0   ){ hours += 12; }\n    \n          hours = hours + \"\";\n          if( hours.length == 1 ){ hours = \"0\" + hours; }\n    \n          \n          let minutes = currentdate.getUTCMinutes();\n    \n          \n          minutes = minutes + \"\";\n          if( minutes.length == 1 ){ minutes = \"0\" + minutes; }\n    \n          let seconds = currentdate.getUTCSeconds();\n        \n      }\n\n      timerstart() {\n        this.setState(\n            (state, props) => {\n              return { timer: state.counter + 1 };\n            });\n      }\n\n      componentWillMount(){\n        this.setTime();\n      }\n\n      componentDidMount(){\n        window.setInterval(function () {\n         this.setTime();\n       }.bind(this), 1000);\n     }\n\n     \n\n    render() {\n        return (<React.Fragment>\n            <Clock format={'HH:mm:ss'} ticking={true} timezone={'US/Pacific'} /><br/>\n            <Button color=\"primary\"  >Start</Button>\n            <Button color=\"danger\">Stop</Button>\n            <Button color=\"success\">Reset</Button>\n            \n            <div >\n                <label>Real - Time : </label>\n                <span style= {{\"textDecoration\":\"underline\"}} >{this.state.hours}:{this.state.minutes}:{this.state.seconds}</span>\n            </div>\n            \n        </React.Fragment>)\n    }\n}\n\n\n\nexport default Index"]},"metadata":{},"sourceType":"module"}