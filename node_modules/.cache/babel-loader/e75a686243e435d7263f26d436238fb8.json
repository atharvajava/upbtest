{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/atharva/Documents/UPB/jobtest/pages/index.js\";\nimport React from 'react';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ms from \"pretty-ms\";\nimport Clock from 'react-live-clock';\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Index).apply(this, arguments));\n  }\n\n  _createClass(Index, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      var _this = this;\n\n      this.setState({\n        time: this.state.time,\n        start: _Date$now() - this.state.time,\n        isOn: true\n      });\n      this.timer = setInterval(function () {\n        return _this.setState({\n          time: _Date$now() - _this.state.start\n        });\n      }, 1);\n    }\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      this.setState({\n        isOn: false\n      });\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"resetTimer\",\n    value: function resetTimer() {\n      this.setState({\n        time: 0\n      });\n    }\n  }, {\n    key: \"lapTimer\",\n    value: function lapTimer() {\n      if (this.state.clicks <= 5) {\n        this.setState({\n          clicks: this.state.clicks + 1\n        });\n        localStorage.setItem(this.state.clicks, this.state.timer);\n      }\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime() {\n      var currentdate = new Date();\n      var hours = currentdate.getUTCHours() + 2;\n\n      if (hours >= 24) {\n        hours -= 24;\n      }\n\n      if (hours < 0) {\n        hours += 12;\n      }\n\n      hours = hours + \"\";\n\n      if (hours.length == 1) {\n        hours = \"0\" + hours;\n      }\n\n      var minutes = currentdate.getUTCMinutes();\n      minutes = minutes + \"\";\n\n      if (minutes.length == 1) {\n        minutes = \"0\" + minutes;\n      }\n\n      var seconds = currentdate.getUTCSeconds(); //console.log(hours, minutes, seconds)\n\n      this.setState({\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds,\n        time: 0,\n        start: 0,\n        isOn: false\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setTime();\n      /*window.setInterval(function () {\n          this.setTime();\n        }.bind(this), 1000);*/\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        time: 0,\n        start: 0,\n        isOn: false,\n        clicks: 0\n      });\n      this.startTimer = this.startTimer.bind(this);\n      this.stopTimer = this.stopTimer.bind(this);\n      this.resetTimer = this.resetTimer.bind(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var start = this.state.time == 0 ? React.createElement(Button, {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"start\") : null;\n      var stop = this.state.isOn ? React.createElement(Button, {\n        onClick: this.stopTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"stop\") : null;\n      var reset = this.state.time != 0 && !this.state.isOn ? React.createElement(Button, {\n        onClick: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"reset\") : null;\n      var resume = this.state.time != 0 && !this.state.isOn ? React.createElement(Button, {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"resume\") : null;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Timer Project\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Real - Time : \"), React.createElement(Clock, {\n        format: 'HH:mm:ss',\n        ticking: true,\n        timezone: 'Europe/Berlin',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"timer: \", ms(this.state.time)), start, resume, stop, reset, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.lapTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Lap\"));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/atharva/Documents/UPB/jobtest/pages/index.js"],"names":["React","Button","ms","Clock","Index","setState","time","state","start","isOn","timer","setInterval","clearInterval","clicks","localStorage","setItem","currentdate","Date","hours","getUTCHours","length","minutes","getUTCMinutes","seconds","getUTCSeconds","setTime","startTimer","bind","stopTimer","resetTimer","stop","reset","resume","lapTimer","Component"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { Button } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ms from \"pretty-ms\";\nimport Clock from 'react-live-clock';\n\nclass Index extends React.Component {\n\n\n    startTimer() {\n        this.setState({\n            time: this.state.time,\n            start: Date.now() - this.state.time,\n            isOn: true\n        })\n        this.timer = setInterval(() => this.setState({\n          time: Date.now() - this.state.start\n        }), 1);\n      }\n\n\n      stopTimer() {\n        this.setState({isOn: false})\n        clearInterval(this.timer)\n      }\n\n      resetTimer() {\n        this.setState({time: 0})\n      }\n\n      lapTimer() {\n        if(this.state.clicks<= 5) {\n           this.setState({clicks: this.state.clicks+1})\n           localStorage.setItem(this.state.clicks,this.state.timer)\n        }\n      }\n\n\n    setTime(){\n  \n        let currentdate = new Date();\n        let hours = currentdate.getUTCHours()+2    \n      \n          \n          if( hours >= 24 ){ hours -= 24; }\n          if( hours < 0   ){ hours += 12; }\n    \n          hours = hours + \"\";\n          if( hours.length == 1 ){ hours = \"0\" + hours; }\n    \n          \n          let minutes = currentdate.getUTCMinutes();\n    \n          \n          minutes = minutes + \"\";\n          if( minutes.length == 1 ){ minutes = \"0\" + minutes; }\n    \n          let seconds = currentdate.getUTCSeconds();\n          //console.log(hours, minutes, seconds)\n          this.setState({\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            time: 0,\n            start: 0,\n            isOn: false\n          });\n      }\n\n      componentWillMount(){\n        this.setTime();\n        /*window.setInterval(function () {\n            this.setTime();\n          }.bind(this), 1000);*/\n      }\n\n      componentDidMount(){\n        this.setState({\n            time: 0,\n            start: 0,\n            isOn: false,\n            clicks:0,\n          });\n       this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n     }\n\n    \n     \n\n    render() {\n        \n\n        let start = (this.state.time == 0) ?\n      <Button onClick={this.startTimer}>start</Button> :\n      null\n    let stop = (this.state.isOn) ?\n      <Button onClick={this.stopTimer}>stop</Button> :\n      null\n    let reset = (this.state.time != 0 && !this.state.isOn) ?\n      <Button onClick={this.resetTimer}>reset</Button> :\n      null\n    let resume = (this.state.time != 0 && !this.state.isOn) ?\n      <Button onClick={this.startTimer}>resume</Button> :\n      null\n\n        return (<React.Fragment>\n            \n            <Button color=\"primary\"  >Timer Project</Button>\n            \n            \n            <div >\n                <label>Real - Time : </label>\n                <Clock format={'HH:mm:ss'} ticking={true} timezone={'Europe/Berlin'} />\n            </div>\n            \n\n            <h3>timer: {ms(this.state.time)}</h3>\n            {start}\n            {resume}\n            {stop}\n            {reset}\n            <Button color=\"primary\"  onClick={this.lapTimer}>Lap</Button>\n        </React.Fragment>)\n    }\n}\n\n\n\nexport default Index"]},"metadata":{},"sourceType":"module"}